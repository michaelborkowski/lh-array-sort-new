cabal-version: >=1.10

name:           lh-array-sort
version:        0.1.0.0
description:    Various "in place" sorting algorithms verified with LH.
homepage:
bug-reports:
author:         Ranjit Jhala
maintainer:     jhala@cs.ucsd.edu
copyright:      2020 Ranjit Jhala
license:        MIT
license-file:   LICENSE
build-type:     Simple

Flag mutable-arrays
   Description: Use mutable arrays.
   Manual: True
   Default: False

Flag prim-mutable-arrays
   Description: Use mutable arrays of primitive types.
   Manual: True
   Default: False

Flag liquid-checks
   Description: Perform liquid checks. This is currently mutually exclusive with mutable arrays (see TODO in Array.hs)
   Default: True

Flag runtime-checks
   Description: Perform runtime bounds checks.
   Default: False

library

  if flag(mutable-arrays)
    cpp-options: -DMUTABLE_ARRAYS

  if flag(prim-mutable-arrays)
    cpp-options: -DPRIM_MUTABLE_ARRAYS -DMUTABLE_ARRAYS

  if flag(runtime-checks)
    cpp-options: -DRUNTIME_CHECKS

  exposed-modules:
      Par
      Array
      ArrayOperations
      Properties.Equivalence
      Properties.Order
      Properties.Partitions
      Properties.RangeProperties

      -- Add sorts here
      Insertion

      DpsMerge
      DpsMergePar
      DpsMergeParSeqFallback
      -- DpsMergeSort     -- don't necessarily need for paper
      DpsMergeSort4
      -- DpsMergeSortPar  -- don't necessarily need for paper
      DpsMergeSort4Par

      Microbench

      QuickSort
      PiecewiseFallbackSort
      PiecewiseFallbackSortPar
      
      CutoffSort

      Linear.Common
  other-modules:
      Array.List
      Array.Mutable
      Array.Mutable.Unlifted
      Array.Mutable.PrimUnlifted
      ProofCombinators
      Linear.Unsafe
  hs-source-dirs:
      src
  build-depends:
      base,
      deepseq,
      containers,
      vector                >= 0.13 && < 0.14,
      parallel,
      monad-par,
      linear-base,
      primitive,
      array,

      -- Liquid stuff
      -- TODO: this shouldn't be neeeded unless -fliquid-checks
      liquid-prelude        >= 0.9.2.8.2,
      liquidhaskell-boot    == 0.9.10.1,
      liquidhaskell         == 0.9.10.1,

      -- tests (Arbitrary class) only
      -- TODO: move to test component
      random,
      tasty-quickcheck

  default-language: GHC2021

  ghc-options: -Wall -Wcompat
               -- TODO: -Wno-blah below should be irradicated
               -Wno-unused-matches -Wno-unused-imports -Wno-unused-local-binds
               -Wno-incomplete-patterns -Wno-x-partial -Wno-simplifiable-class-constraints
               -O2

  -- the plugin stuff
  build-depends: quest-plugin
  ghc-options: -fplugin=QuestPlugin

  -- This is the dreaded if... Here are our constraints:
  -- - Linear and liquid checking are currently mutually exclusive (sadly)
  -- - We can't liquid-check the mutable configurations at the moment (see TODO in Array.hs)
  if flag(liquid-checks) && !flag(mutable-arrays) && !flag(prim-mutable-arrays)
    ghc-options: -fplugin=LiquidHaskell
                  -fplugin-opt=LiquidHaskell:--ple
                  -fplugin-opt=LiquidHaskell:--ple-with-undecided-guards
                  -fplugin-opt=LiquidHaskell:--reflection
                  -fplugin-opt=LiquidHaskell:--short-names
    ghc-options: -fplugin-opt=QuestPlugin:liquid
  else
    default-extensions: LinearTypes
    cpp-options: -DLINEAR
    ghc-options: -fplugin-opt=QuestPlugin:linear

test-suite test
  if flag(mutable-arrays)
    cpp-options: -DMUTABLE_ARRAYS

  if flag(prim-mutable-arrays)
    cpp-options: -DPRIM_MUTABLE_ARRAYS -DMUTABLE_ARRAYS

  if flag(runtime-checks)
    cpp-options: -DRUNTIME_CHECKS

  default-language:
    GHC2021
  type:
    exitcode-stdio-1.0
  hs-source-dirs:
    tests
  main-is:
    Main.hs
  other-modules:
    ArrayTests
    SortTests
    Infra
    InvalidSorts
    Properties
  build-depends:
    base >= 4.7 && < 5,
    array,
    deepseq,
    random,
    tasty,
    tasty-hunit,
    tasty-smallcheck,
    tasty-quickcheck,
    lh-array-sort
